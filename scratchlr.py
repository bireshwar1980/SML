# -*- coding: utf-8 -*-
"""scratchLR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x08sabhAklsIC578BR3-6qqLDENS87Km
"""

import pandas as pd
import numpy as np
from sklearn import linear_model
import matplotlib.pyplot as plt
from google.colab import files
uploaded = files.upload()

mvdf = pd.read_csv('homepricesmv1.csv')
mvdf

mvdf.bedrooms = mvdf.bedrooms.fillna(mvdf.bedrooms.median())
mvdf

newmv_dfx = mvdf.drop(mvdf.columns[[1,2, 3]],axis = 1)
newmv_dfx

newmv_dfy = mvdf.drop(mvdf.columns[[0,1, 2]],axis = 1)
newmv_dfy

from sklearn.model_selection import train_test_split

newmv_dfx_train, newmv_dfx_test, newmv_dfy_train, newmv_dfy_test = train_test_split(newmv_dfx, newmv_dfy, test_size=0.2, random_state=0)

newmv_dfy_test

newmv_dfx_test

newmv_dfx_train

newmv_dfy_train

import math
import statistics
import operator

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
plt.xlabel('area')
plt.ylabel('price')
plt.scatter(newmv_dfx_train,newmv_dfy_train,color='red',marker='+')

mean_x = np.mean(newmv_dfx_train)

mean_x

mean_y = np.mean(newmv_dfy_train)

mean_y

X = newmv_dfx_train.values

X

Y = newmv_dfy_train.values

Y

mean_x = np.mean(X)
mean_x

mean_y = np.mean(Y)
mean_y

# total no.of input values
m = len(X)
m

# using the formula to calculate m & c
numer = 0
denom = 0
for i in range(m):
  numer += (X[i] - mean_x) * (Y[i] - mean_y)
  denom += (X[i] - mean_x) ** 2
slope = numer / denom
slope

intercept = mean_y - (slope * mean_x)
intercept

X_test = newmv_dfx_test.values

X_test

Y_pred = slope*X_test + intercept

Y_pred

newmv_dfx_test['Predicted price']=Y_pred
newmv_dfx_test

newmv_dfx_test['Actual price']=newmv_dfy_test
newmv_dfx_test

from sklearn.metrics import r2_score
score = r2_score(newmv_dfy_test, Y_pred)
print("The accuracy of our model is {}%".format(round(score, 2) *100))

# plotting values and regression line
max_x = np.max(X)
min_x = np.min(X)
# calculating line values x and y
x = np.linspace (min_x, max_x)
y = intercept + slope * x
plt.plot(x, y, color='#58b970', label='Regression Line')
plt.scatter(X, Y, c='#ef5423', label='data points')

plt.xlabel('area')
plt.ylabel('price')
plt.legend()
plt.show()

from google.colab import files

uploaded = files.upload()
homeprices_df = pd.read_csv("homepricesMVF1.csv")
homeprices_df.head(3)

newmv_dfv = homeprices_df.drop(homeprices_df.columns[[1,2]],axis = 1)
newmv_dfv

X_validate = newmv_dfv.values

X_validate

Y_validate = slope*X_validate + intercept
Y_validate

newmv_dfv['Approx price']=Y_validate
newmv_dfv

from google.colab import drive
drive.mount('/content/drive')

newmv_dfv.to_csv('/content/drive/My Drive/mvpredictionS.csv', index=False)