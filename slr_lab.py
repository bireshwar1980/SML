# -*- coding: utf-8 -*-
"""SLR_LAB.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_K4HhYs6vkIA498o9kh803ft3a-dfk7N
"""

from google.colab import files
uploaded = files.upload()

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import math
import statistics
import operator
import matplotlib.pyplot as plt
# %matplotlib inline
data = pd.read_csv('homeprices.csv')
data

X = data['area'].values
Y = data['price'].values
X

Y

X.max()

Y.max()

X.sum()



median_x=np.median(X)

median_x

median_y=np.median(Y)

median_y

mode_x=(statistics.mode(X))

mode_x

#mean_x=(statistics.mean(X))

#mean_x

median_x=(statistics.median(X))

median_x

# calculate mean of x & y using an inbuilt numpy method mean()
mean_x = np.mean(X)
mean_y = np.mean(Y)

# total no.of input values
m = len(X)
m

# using the formula to calculate m & c
numer = 0
denom = 0
for i in range(m):
  numer += (X[i] - mean_x) * (Y[i] - mean_y)
  denom += (X[i] - mean_x) ** 2
slope = numer / denom
slope

intercept = mean_y - (slope * mean_x)
intercept

Y_pred = slope*X + intercept

Y_pred

MSE = np.square(np.subtract(Y,Y_pred)).mean()
MSE

RMSE = math.sqrt(MSE)

RMSE

# plotting values and regression line
max_x = np.max(X)
min_x = np.min(X)
# calculating line values x and y
x = np.linspace (min_x, max_x)
y = intercept + slope * x
plt.plot(x, y, color='#58b970', label='Regression Line')
plt.scatter(X, Y, c='#ef5423', label='data points')

plt.xlabel('area')
plt.ylabel('price')
plt.legend()
plt.show()

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()

#SC=scaler.fit(data)

df_scaled = scaler.fit_transform(data)
ss = pd.DataFrame(df_scaled,columns=['area','price'])
ss.head()

